* 8.1.1
-- テスト用のテーブル（MySQLの例）
CREATE TABLE concert (
    name    VARCHAR(10),
    flag    INTEGER
);
INSERT INTO concert VALUES ('anton', 1);
INSERT INTO concert VALUES ('julia', 0);
INSERT INTO concert VALUES ('maren', 1);
INSERT INTO concert VALUES ('sarah', NULL);

SELECT * FROM concert;

SELECT name, flag,
   CASE flag WHEN 1 THEN 'vip'
   WHEN 0 THEN 'reserved seating'
   ELSE 'general admission' END AS ticket
FROM concert;

* 8.1.2
SELECT name, flag,
   CASE WHEN name = 'anton' THEN 'vip'
   WHEN flag IN (0,1) THEN 'reserved seating'
   ELSE 'general admission' END AS ticket
FROM concert;

* 8.2.1
-- テスト用のテーブル（MySQLの例）
CREATE TABLE workouts (
    name        VARCHAR(10),
    calories    INTEGER
);
INSERT INTO workouts VALUES ('ally', 80);
INSERT INTO workouts VALUES ('ally', 75);
INSERT INTO workouts VALUES ('ally', 90);
INSERT INTO workouts VALUES ('jess', 100);
INSERT INTO workouts VALUES ('jess', 92);

SELECT * FROM workouts;

SELECT name,
       SUM(calories) AS total_calories
FROM workouts
GROUP BY name;

* 8.2.1.1
-- テスト用のテーブル（MySQLの例）
CREATE TABLE daily_workouts (
    id          INTEGER,
    name        VARCHAR(10),
    dw_date     DATE,
    calories    INTEGER
);
INSERT INTO daily_workouts VALUES (1, 'ally', '2021-03-03', 80);
INSERT INTO daily_workouts VALUES (1, 'ally', '2021-03-04', 75);
INSERT INTO daily_workouts VALUES (1, 'ally', '2021-03-05', 90);
INSERT INTO daily_workouts VALUES (2, 'jess', '2021-03-03', 100);
INSERT INTO daily_workouts VALUES (2, 'jess', '2021-03-05', 92);

SELECT * FROM daily_workouts;

SELECT id, name,
       COUNT(dw_date) AS workouts,
       SUM(calories) AS calories
FROM daily_workouts
GROUP BY id, name;

コラム：
SELECT id,
       MAX(name) AS name,
       COUNT(dw_date) AS workouts,
       SUM(calories) AS calories
FROM daily_workouts
GROUP BY id;

* 8.2.2
-- MySQL
SELECT name,
       GROUP_CONCAT(calories) AS calories_list
FROM workouts
GROUP BY name;

表8-3：
-- MySQL
SELECT name, GROUP_CONCAT(calories) FROM workouts GROUP BY name;
SELECT name, GROUP_CONCAT(calories SEPARATOR ',') FROM workouts GROUP BY name;

-- Oracle
SELECT name, LISTAGG(calories) FROM workouts GROUP BY name;
SELECT name, LISTAGG(calories, ',') FROM workouts GROUP BY name;

-- PostgreSQL
SELECT name, ARRAY_AGG(calories) FROM workouts GROUP BY name;

-- SQL Server
SELECT name, STRING_AGG(calories, ',') FROM workouts GROUP BY name;

-- SQLite
SELECT name, GROUP_CONCAT(calories) FROM workouts GROUP BY name;
SELECT name, GROUP_CONCAT(calories, ',') FROM workouts GROUP BY name;

表8-4：
-- MySQL
SELECT name, GROUP_CONCAT(calories ORDER BY calories) FROM workouts GROUP BY name;
SELECT name, GROUP_CONCAT( DISTINCT calories) FROM workouts GROUP BY name;

-- Oracle
SELECT name, LISTAGG(calories, ',') WITHIN GROUP (ORDER BY calories) 
FROM workouts GROUP BY name;
SELECT name, LISTAGG( DISTINCT calories, ',') FROM workouts GROUP BY name;

-- PostgreSQL
SELECT name, ARRAY_AGG(calories ORDER BY calories) FROM workouts GROUP BY name;
SELECT name, ARRAY_AGG( DISTINCT calories) FROM workouts GROUP BY name;

-- SQL Server
SELECT name, STRING_AGG(calories, ',') WITHIN GROUP (ORDER BY calories) 
FROM workouts GROUP BY name;

-- SQLite
SELECT name, GROUP_CONCAT( DISTINCT calories) FROM workouts GROUP BY name;

* 8.2.3
-- テスト用のテーブル（MySQLの例）
CREATE TABLE spendings (
    year    INTEGER,
    month   INTEGER,
    amount  INTEGER
);
INSERT INTO spendings VALUES (2019, 1, 20);
INSERT INTO spendings VALUES (2019, 1, 30);
INSERT INTO spendings VALUES (2020, 1, 42);
INSERT INTO spendings VALUES (2020, 2, 37);
INSERT INTO spendings VALUES (2020, 2, 100);

SELECT * FROM spendings;

SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY year, month
ORDER BY year, month;

* 8.2.3.1
-- Oracle、PostgreSQL
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY ROLLUP(year, month)
ORDER BY year, month;

-- SQL Server
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY ROLLUP(year, month);

-- MySQL、SQL Server
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY year, month WITH ROLLUP;

* 8.2.3.2
-- Oracle、PostgreSQL
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY CUBE(year, month)
ORDER BY year, month;

-- SQL Server
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY CUBE(year, month);

* 8.2.3.3
-- Oracle、PostgreSQL
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY GROUPING SETS(year, month)
ORDER BY year, month;

-- SQL Server
SELECT year, month,
       SUM(amount) AS total
FROM spendings
GROUP BY GROUPING SETS(year, month);

* 8.3
-- テスト用のテーブル（MySQLの例）
CREATE TABLE sales (
    name    VARCHAR(10),
    month   INTEGER,
    sales   INTEGER
);
INSERT INTO sales VALUES ('David', 3, 2);
INSERT INTO sales VALUES ('David', 4, 11);
INSERT INTO sales VALUES ('Laura', 3, 3);
INSERT INTO sales VALUES ('Laura', 4, 14);
INSERT INTO sales VALUES ('Laura', 5, 7);
INSERT INTO sales VALUES ('Laura', 6, 1);

SELECT * FROM sales;

* 8.3.1
SELECT name,
       SUM(sales) AS total_sales
FROM sales
GROUP BY name;

* 8.3.2
SELECT name,
       ROW_NUMBER() OVER (PARTITION BY name
       ORDER BY month) AS sale_month
FROM sales;

* 8.3.3
-- テスト用のテーブル（MySQLの例）
CREATE TABLE baby_names (
    gender  CHAR(1),
    name    VARCHAR(10),
    babies  INTEGER
);
INSERT INTO baby_names VALUES ('F', 'Emma', 92);
INSERT INTO baby_names VALUES ('F', 'Mia', 88);
INSERT INTO baby_names VALUES ('F', 'Olivia', 100);
INSERT INTO baby_names VALUES ('M', 'Liam', 105);
INSERT INTO baby_names VALUES ('M', 'Mateo', 95);
INSERT INTO baby_names VALUES ('M', 'Noah', 110);

SELECT * FROM baby_names;

SELECT gender, name,
       ROW_NUMBER() OVER (
       ORDER BY babies DESC) AS popularity
FROM baby_names;

SELECT gender, name,
       ROW_NUMBER() OVER (PARTITION BY gender
       ORDER BY babies DESC) AS popularity
FROM baby_names;

* 8.3.4
ステップ 1：
SELECT gender, name, babies,
       FIRST_VALUE(name) OVER (PARTITION BY gender
       ORDER BY babies DESC) AS top_name
FROM baby_names;

ステップ 2：
SELECT * FROM
(SELECT gender, name, babies,
        FIRST_VALUE(name) OVER (PARTITION BY gender
        ORDER BY babies DESC) AS top_name
FROM baby_names) AS top_name_table
WHERE name = top_name;

-- Oracle
SELECT * FROM
(SELECT gender, name, babies,
        FIRST_VALUE(name) OVER (PARTITION BY gender
        ORDER BY babies DESC) AS top_name
FROM baby_names)
WHERE name = top_name;

* 8.3.5
ステップ 1：
SELECT gender, name, babies,
       NTH_VALUE(name, 2) OVER (PARTITION BY gender
       ORDER BY babies DESC) AS second_name
FROM baby_names;

ステップ 2：
SELECT * FROM
(SELECT gender, name, babies,
        NTH_VALUE(name, 2) OVER (PARTITION BY gender
        ORDER BY babies DESC) AS second_name
FROM baby_names) AS second_name_table
WHERE name = second_name;

-- Oracle
SELECT * FROM
(SELECT gender, name, babies,
        NTH_VALUE(name, 2) OVER (PARTITION BY gender
        ORDER BY babies DESC) AS second_name
FROM baby_names)
WHERE name = second_name;

* 8.3.6
ステップ 1：
SELECT gender, name, babies,
       ROW_NUMBER() OVER (PARTITION BY gender
       ORDER BY babies DESC) AS popularity
FROM baby_names;

ステップ 2：
SELECT * FROM
(SELECT gender, name, babies,
        ROW_NUMBER() OVER (PARTITION BY gender
        ORDER BY babies DESC) AS popularity
FROM baby_names) AS popularity_table
WHERE popularity IN (1,2);

-- Oracle
SELECT * FROM
(SELECT gender, name, babies,
        ROW_NUMBER() OVER (PARTITION BY gender
        ORDER BY babies DESC) AS popularity
FROM baby_names)
WHERE popularity IN (1,2);

* 8.3.7
SELECT gender, name, babies,
       LAG(name) OVER (PARTITION BY gender
       ORDER BY babies DESC) AS prior_name
FROM baby_names;

SELECT gender, name, babies,
       LAG(name, 2, 'No name')
       OVER (PARTITION BY gender
       ORDER BY babies DESC) AS prior_name_2
FROM baby_names;

* 8.3.8
-- テスト用のテーブル（MySQLの例）
DROP TABLE sales;
CREATE TABLE sales (
    name    VARCHAR(10),
    month   INTEGER,
    sales   INTEGER
);
INSERT INTO sales VALUES ('David', 1, 2);
INSERT INTO sales VALUES ('David', 2, 11);
INSERT INTO sales VALUES ('David', 3, 6);
INSERT INTO sales VALUES ('David', 4, 8);
INSERT INTO sales VALUES ('Laura', 1, 3);
INSERT INTO sales VALUES ('Laura', 2, 14);
INSERT INTO sales VALUES ('Laura', 3, 7);
INSERT INTO sales VALUES ('Laura', 4, 1);
INSERT INTO sales VALUES ('Laura', 5, 20);

SELECT * FROM sales;

SELECT name, month, sales,
       AVG(sales) OVER (PARTITION BY name
       ORDER BY month
       ROWS BETWEEN 2 PRECEDING AND
       CURRENT ROW) three_month_ma
FROM sales;

-- SQL Server
SELECT name, month, sales,
       AVG(CAST(sales AS DECIMAL)) OVER (PARTITION BY name
       ORDER BY month
       ROWS BETWEEN 2 PRECEDING AND
       CURRENT ROW) three_month_ma
FROM sales;

* 8.3.9
SELECT name, month, sales,
       SUM(sales) OVER (PARTITION BY name
       ORDER BY month
       ROWS BETWEEN UNBOUNDED PRECEDING AND
       CURRENT ROW) running_total
FROM sales;

コラム：
SELECT month, name,
    SUM(sales) OVER (ORDER BY month ROWS BETWEEN
    UNBOUNDED PRECEDING AND CURRENT ROW) rt_rows,
    SUM(sales) OVER (ORDER BY month RANGE BETWEEN
    UNBOUNDED PRECEDING AND CURRENT ROW) rt_range
FROM sales;

* 8.4.1
-- テスト用のテーブル（MySQLの例）
CREATE TABLE fruits (
    id      INTEGER,
    name    VARCHAR(10),
    fruit   VARCHAR(20)
);
INSERT INTO fruits VALUES (1, 'Henry', 'strawberries');
INSERT INTO fruits VALUES (2, 'Henry', 'grapefruit');
INSERT INTO fruits VALUES (3, 'Henry', 'watermelon');
INSERT INTO fruits VALUES (4, 'Lily', 'strawberries');
INSERT INTO fruits VALUES (5, 'Lily', 'watermelon');
INSERT INTO fruits VALUES (6, 'Lily', 'strawberries');
INSERT INTO fruits VALUES (7, 'Lily', 'watermelon');

SELECT * FROM fruits;

-- Oracle
SELECT *
FROM fruits
PIVOT
(COUNT(id) FOR fruit IN ('strawberries',
                'grapefruit', 'watermelon'));

-- SQL Server
SELECT *
FROM fruits
PIVOT
(COUNT(id) FOR fruit IN ([strawberries],
                [grapefruit], [watermelon])
) AS fruits_pivot;

コラム：
SELECT name,
       SUM(CASE WHEN fruit = 'strawberries'
            THEN 1 ELSE 0 END) AS strawberries,
       SUM(CASE WHEN fruit = 'grapefruit'
            THEN 1 ELSE 0 END) AS grapefruit,
       SUM(CASE WHEN fruit = 'watermelon'
            THEN 1 ELSE 0 END) AS watermelon
FROM fruits
GROUP BY name
ORDER BY name;

* 8.4.2
-- テスト用のテーブル（MySQLの例）
CREATE TABLE favorite_fruits (
    id          INTEGER,
    name        VARCHAR(10),
    fruit_one   VARCHAR(10),
    fruit_two   VARCHAR(10),
    fruit_thr   VARCHAR(10)
);
INSERT INTO favorite_fruits VALUES (1, 'Anna', 'apple', 'banana', '');
INSERT INTO favorite_fruits VALUES (2, 'Barry', 'raspberry', '', '');
INSERT INTO favorite_fruits VALUES (3, 'Liz', 'lemon', 'lime', 'orange');
INSERT INTO favorite_fruits VALUES (4, 'Tom', 'peach', 'pear', 'plum');

SELECT * FROM favorite_fruits;

-- Oracle
SELECT *
FROM favorite_fruits
UNPIVOT
(fruit FOR ranking IN (fruit_one AS 1,
    fruit_two AS 2,
    fruit_thr AS 3));

-- SQL Server
SELECT *
FROM favorite_fruits
UNPIVOT
(fruit FOR ranking IN (fruit_one,
                       fruit_two,
                       fruit_thr)
) AS fruit_unpivot
WHERE fruit <> '';

コラム：
WITH all_fruits AS
(SELECT id, name,
        1 AS ranking,
        fruit_one AS fruit
FROM favorite_fruits
UNION ALL
SELECT id, name,
       2 AS ranking,
       fruit_two AS fruit
FROM favorite_fruits
UNION ALL
SELECT id, name,
       3 AS ranking,
       fruit_thr AS fruit
FROM favorite_fruits)

SELECT *
FROM all_fruits
WHERE fruit <> ''
ORDER BY id, name, ranking;

